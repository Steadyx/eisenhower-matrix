name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push planit-frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/planit-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/planit-frontend:${{ github.sha }}

      - name: Build and push planit-backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/planit-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/planit-backend:${{ github.sha }}

      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail
            IFS=$'\n\t'

            # Variables
            PROJECT_DIR="/home/edwardkemp/websites/eisenhower-matrix-app"
            REPO_URL="git@github.com:Steadyx/eisenhower-matrix.git"
            BRANCH="main"

            echo "Navigating to project directory..."
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Project directory does not exist. Cloning repository..."
              git clone "$REPO_URL" "$PROJECT_DIR"
            else
              echo "Project directory exists. Pulling latest changes..."
              cd "$PROJECT_DIR"

              echo "Fetching latest changes..."
              git fetch origin

              echo "Resetting local changes..."
              git reset --hard origin/"$BRANCH"
            fi

            echo "Ensuring acme.json exists with correct permissions..."
            ACME_FILE="$PROJECT_DIR/traefik/acme-planit.json"  # Correct acme json file reference
            if [ ! -f "$ACME_FILE" ]; then
              echo "Creating acme.json file for Let's Encrypt."
              sudo touch "$ACME_FILE"
            fi
            sudo chmod 600 "$ACME_FILE"

            echo "Pulling latest Docker images..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/planit-frontend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/planit-backend:latest

            echo "Stopping existing Docker stack..."
            sudo docker stack rm planit || echo "Stack planit does not exist."

            echo "Waiting for stack removal..."
            while sudo docker stack ls | grep -q planit; do
              echo "Waiting for stack planit to be removed..."
              sleep 5
            done

            echo "Pruning Docker system to remove unused data..."
            sudo docker system prune -f --volumes

            echo "Creating external Docker secrets..."
            echo "${{ secrets.JWT_SECRET }}" | sudo docker secret create jwt_secret -
            echo "${{ secrets.MONGO_ROOT_USER }}" | sudo docker secret create mongo_root_user -
            echo "${{ secrets.MONGO_ROOT_PASSWORD }}" | sudo docker secret create mongo_root_password -

            echo "Deploying the updated stack..."
            sudo docker stack deploy -c /home/edwardkemp/websites/eisenhower-matrix-app/docker-compose.prod.yml eisenhower-matrix-app

            echo "Deployment completed successfully."
