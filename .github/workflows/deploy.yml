name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push planit-frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/planit-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/planit-frontend:${{ github.sha }}

      - name: Build and push planit-backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/planit-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/planit-backend:${{ github.sha }}

      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail
            IFS=$'\n\t'

            ##############################################################################
            # Variables
            ##############################################################################
            PROJECT_DIR="/home/edwardkemp/websites/eisenhower-matrix-app"
            REPO_URL="git@github.com:Steadyx/eisenhower-matrix.git"
            BRANCH="main"
            STACK_NAME="eisenhower-matrix-app"
            EXTERNAL_NETWORK="test-app_default"

            # Adjust these if needed
            MAX_RETRIES=5
            RETRY_SLEEP=10  # seconds

            ##############################################################################
            # Ensure Docker is available
            ##############################################################################
            if ! command -v docker &> /dev/null; then
              echo "Error: Docker is not installed or not in PATH."
              exit 1
            fi

            ##############################################################################
            # Check if we're in a Docker Swarm
            ##############################################################################
            if ! docker info 2>/dev/null | grep -q "Swarm: active"; then
              echo "Error: Docker Swarm is not initialized on this machine."
              echo "Run 'docker swarm init' on this machine before running this script."
              exit 1
            fi

            ##############################################################################
            # Clone or Update Project
            ##############################################################################
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Project directory does not exist. Cloning repository..."
              git clone "$REPO_URL" "$PROJECT_DIR"
              cd "$PROJECT_DIR"
            else
              echo "Project directory exists. Pulling latest changes..."
              cd "$PROJECT_DIR"
              git fetch origin
              echo "Resetting local changes to origin/$BRANCH..."
              git reset --hard origin/"$BRANCH"
            fi

            ##############################################################################
            # Ensure acme-planit.json exists with correct permissions
            ##############################################################################
            ACME_FILE="$PROJECT_DIR/acme-planit.json"
            if [ ! -f "$ACME_FILE" ]; then
              echo "Creating acme-planit.json for Let's Encrypt..."
              sudo touch "$ACME_FILE"
            fi
            sudo chmod 600 "$ACME_FILE"
            echo "acme-planit.json is present with correct permissions."

            ##############################################################################
            # Pull Latest Docker Images
            ##############################################################################
            echo "Pulling latest Docker images..."
            if [ -z "${DOCKER_USERNAME:-}" ]; then
              echo "Warning: \$DOCKER_USERNAME is not set. Unable to pull from private repo."
              # If DOCKER_USERNAME is not set, either fail here or skip pulling
              # exit 1
            else
              sudo docker pull "${DOCKER_USERNAME}/planit-frontend:latest" || true
              sudo docker pull "${DOCKER_USERNAME}/planit-backend:latest" || true
            fi
            echo "Docker images pulled (or attempted to pull) successfully."

            ##############################################################################
            # Stop and Remove Existing Stack
            ##############################################################################
            if sudo docker stack ls | awk '{print $1}' | grep -q "^${STACK_NAME}$"; then
              echo "Stopping existing Docker stack: ${STACK_NAME}..."
              sudo docker stack rm "${STACK_NAME}"

              echo "Waiting for stack removal..."
              while sudo docker stack ls | awk '{print $1}' | grep -q "^${STACK_NAME}$"; do
                echo "Waiting for stack ${STACK_NAME} to be removed..."
                sleep 5
              done
              echo "Stack ${STACK_NAME} removed successfully."
            else
              echo "Stack ${STACK_NAME} does not exist. No action needed."
            fi

            ##############################################################################
            # Prune Docker System (Optional)
            # USE WITH CAUTION IN PRODUCTION.
            ##############################################################################
            echo "Pruning Docker system to remove unused data..."
            sudo docker system prune -f --volumes
            echo "Docker system pruned successfully."

            ##############################################################################
            # Manage Docker Secrets
            ##############################################################################
            recreate_secret() {
              local secret_name="$1"
              local secret_value="$2"

              # Remove existing secret if present
              if sudo docker secret ls --format '{{.Name}}' | grep -q "^${secret_name}$"; then
                echo "Removing existing secret: ${secret_name}"
                sudo docker secret rm "${secret_name}"
              fi

              echo "Creating secret: ${secret_name}"
              echo "${secret_value}" | sudo docker secret create "${secret_name}" -
            }

            if [ -z "${JWT_SECRET:-}" ]; then
              echo "Warning: \$JWT_SECRET is not set. Secret 'jwt_secret' not created."
            else
              recreate_secret "jwt_secret" "${JWT_SECRET}"
            fi

            ##############################################################################
            # Ensure Overlay Network (Conditionally Create If Missing)
            ##############################################################################
            if sudo docker network inspect "${EXTERNAL_NETWORK}" > /dev/null 2>&1; then
              echo "Network ${EXTERNAL_NETWORK} already exists. Skipping creation."
            else
              echo "Creating Docker overlay network: ${EXTERNAL_NETWORK}"
              # Overlay networks are used in Docker Swarm mode
              sudo docker network create --driver overlay --attachable "${EXTERNAL_NETWORK}"
            fi

            ##############################################################################
            # Deploy Stack with Retry
            ##############################################################################
            retry_count=0

            while true; do
              retry_count=$((retry_count + 1))
              echo "Attempting to deploy Docker stack (Attempt ${retry_count})..."
              
              # Docker stack deploy
              if sudo docker stack deploy -c "${PROJECT_DIR}/docker-compose.prod.yml" "${STACK_NAME}"; then
                echo "Deployment completed successfully."
                break
              else
                echo "Deployment failed on attempt ${retry_count}."
              fi

              if [ "${retry_count}" -ge "${MAX_RETRIES}" ]; then
                echo "Failed to deploy stack after ${MAX_RETRIES} attempts."
                exit 1
              fi

              echo "Retrying stack deployment in ${RETRY_SLEEP} seconds..."
              sleep "${RETRY_SLEEP}"
            done

            echo "All done! Your stack is up and running."
