name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push planit-frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/planit-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/planit-frontend:${{ github.sha }}

      - name: Build and push planit-backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/planit-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/planit-backend:${{ github.sha }}

      - name: Add Host Key to Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            set -euo pipefail
            IFS=$'\n\t'

            # Variables
            PROJECT_DIR="/home/edwardkemp/websites/eisenhower-matrix-app"
            REPO_URL="git@github.com:Steadyx/eisenhower-matrix.git"
            BRANCH="main"
            STACK_NAME="eisenhower-matrix-app"
            EXTERNAL_NETWORK="test-app_default"

            # Navigate to project directory
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Project directory does not exist. Cloning repository..."
              git clone "$REPO_URL" "$PROJECT_DIR"
            else
              echo "Project directory exists. Pulling latest changes..."
              cd "$PROJECT_DIR"

              echo "Fetching latest changes..."
              git fetch origin

              echo "Resetting local changes..."
              git reset --hard origin/"$BRANCH"
            fi

            # Ensure acme-planit.json exists with correct permissions
            ACME_FILE="$PROJECT_DIR/acme-planit.json"
            if [ ! -f "$ACME_FILE" ]; then
              echo "Creating acme-planit.json file for Let's Encrypt."
              sudo touch "$ACME_FILE"
            fi
            sudo chmod 600 "$ACME_FILE"
            echo "acme-planit.json is present with correct permissions."

            # Pull latest Docker images
            echo "Pulling latest Docker images..."
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}/planit-frontend:latest"
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}/planit-backend:latest"
            echo "Docker images pulled successfully."

            # Stop existing Docker stack
            if sudo docker stack ls | awk '{print $1}' | grep -q "^${STACK_NAME}$"; then
              echo "Stopping existing Docker stack: ${STACK_NAME}..."
              sudo docker stack rm "${STACK_NAME}"

              echo "Waiting for stack removal..."
              while sudo docker stack ls | awk '{print $1}' | grep -q "^${STACK_NAME}$"; do
                echo "Waiting for stack ${STACK_NAME} to be removed..."
                sleep 5
              done
              echo "Stack ${STACK_NAME} removed successfully."
            else
              echo "Stack ${STACK_NAME} does not exist. No action needed."
            fi

            # Prune Docker system (Optional: Be cautious with this in production)
            echo "Pruning Docker system to remove unused data..."
            sudo docker system prune -f --volumes
            echo "Docker system pruned successfully."

            # Remove and recreate Docker secrets
            recreate_secret() {
              local secret_name="$1"
              local secret_value="$2"

              if sudo docker secret ls --format '{{.Name}}' | grep -q "^${secret_name}$"; then
                echo "Removing existing secret: ${secret_name}"
                sudo docker secret rm "${secret_name}"
              fi

              echo "Creating secret: ${secret_name}"
              echo "${secret_value}" | sudo docker secret create "${secret_name}" -
            }

            recreate_secret jwt_secret "${{ secrets.JWT_SECRET }}"
            echo "Docker secrets recreated successfully."

            # Deploy updated stack with retries
            retry_count=0
            max_retries=5
            sleep_duration=10  # seconds

            while true; do
              echo "Attempting to deploy Docker stack (Attempt $((retry_count + 1)))..."
              if sudo docker stack deploy -c "${PROJECT_DIR}/docker-compose.prod.yml" "${STACK_NAME}"; then
                echo "Deployment completed successfully."
                break
              fi

              retry_count=$((retry_count + 1))
              if [ "${retry_count}" -ge "${max_retries}" ]; then
                echo "Failed to deploy stack after ${max_retries} attempts."
                exit 1
              fi

              echo "Retrying stack deployment... Attempt ${retry_count}"
              sleep "${sleep_duration}"
            done
